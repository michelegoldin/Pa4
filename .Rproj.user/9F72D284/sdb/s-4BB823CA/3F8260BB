{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Presentation Ninja\"\nsubtitle: \"⚔<br/>with xaringan\"\nauthor: \"Yihui Xie\"\ndate: \"2016/12/12\"\noutput:\n  xaringan::moon_reader:\n    lib_dir: libs\n    nature:\n      highlightStyle: github\n      highlightLines: true\n      countIncrementalSlides: false\n---\n\n```{r setup, include=FALSE}\noptions(htmltools.dir.version = FALSE)\n```\n\nbackground-image: url(https://upload.wikimedia.org/wikipedia/commons/b/be/Sharingan_triple.svg)\n\n???\n\nImage credit: [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Sharingan_triple.svg)\n\n---\nclass: center, middle\n\n# xaringan\n\n### /ʃæ.'riŋ.ɡæn/\n\n---\nclass: inverse, center, middle\n\n# Get Started\n\n---\n\n# Hello World\n\nInstall the **xaringan** package from [Github](https://github.com/yihui/xaringan):\n\n```{r eval=FALSE, tidy=FALSE}\ndevtools::install_github(\"yihui/xaringan\")\n```\n\n--\n\nYou are recommended to use the [RStudio IDE](https://www.rstudio.com/products/rstudio/), but you do not have to.\n\n- Create a new R Markdown document from the menu `File -> New File -> R Markdown -> From Template -> Ninja Presentation`;<sup>1</sup>\n\n--\n\n- Click the `Knit` button to compile it;\n\n--\n\n- or use the [RStudio Addin](https://rstudio.github.io/rstudioaddins/)<sup>2</sup> \"Infinite Moon Reader\" to live preview the slides (every time you update and save the Rmd document, the slides will be automatically reloaded in RStudio Viewer.\n\n.footnote[\n[1] 中文用户请看[这份教程](http://slides.yihui.name/xaringan/zh-CN.html)\n\n[2] See [#2](https://github.com/yihui/xaringan/issues/2) if you do not see the template or addin in RStudio.\n]\n\n---\nbackground-image: url(`r xaringan:::karl`)\nbackground-position: 50% 50%\nclass: center, bottom, inverse\n\n# You only live once!\n\n---\n\n# Hello Ninja\n\nAs a presentation ninja, you certainly should not be satisfied by the \"Hello World\" example. You need to understand more about two things:\n\n1. The [remark.js](https://remarkjs.com) library;\n\n1. The **xaringan** package;\n\nBasically **xaringan** injected the chakra of R Markdown (minus Pandoc) into **remark.js**. The slides are rendered by remark.js in the web browser, and the Markdown source needed by remark.js is generated from R Markdown (**knitr**).\n\n---\n\n# remark.js\n\nYou can see an introduction of remark.js from [its homepage](https://remarkjs.com). You should read the [remark.js Wiki](https://github.com/gnab/remark/wiki) at least once to know how to\n\n- create a new slide (Markdown syntax<sup>*</sup> and slide properties);\n\n- format a slide (e.g. text alignment);\n\n- configure the slideshow;\n\n- and use the presentation (keyboard shortcuts).\n\nIt is important to be familiar with remark.js before you can understand the options in **xaringan**.\n\n.footnote[[*] It is different with Pandoc's Markdown! It is limited but should be enough for presentation purporses. Come on... You do not need a slide for the Table of Contents! Well, the Markdown support in remark.js [may be improved](https://github.com/gnab/remark/issues/142) in the future.]\n\n---\nbackground-image: url(`r xaringan:::karl`)\nbackground-size: cover\nclass: center, bottom, inverse\n\n# I was so happy to have discovered remark.js!\n\n---\nclass: inverse, middle, center\n\n# Using xaringan\n\n---\n\n# xaringan\n\nProvides an R Markdown output format `xaringan::moon_reader` as a wrapper for remark.js, and you can use it in the YAML metadata, e.g.\n\n```yaml\n---\ntitle: \"A Cool Presentation\"\noutput:\n  xaringan::moon_reader\n    yolo: true\n    nature:\n      autoplay: 30000\n---\n```\n\nSee the help page `?xaringan::moon_reader` for all possible options that you can use.\n\n---\n\n# remark.js vs xaringan\n\nSome differences between using remark.js (left) and using **xaringan** (right):\n\n.pull-left[\n1. Start with a boilerplate HTML file;\n\n1. Plain Markdown;\n\n1. Write JavaScript to autoplay slides;\n\n1. Manually configure MathJax;\n\n1. Highlight code with `*`;\n\n1. Edit Markdown source and refresh browser to see updated slides;\n]\n\n.pull-right[\n1. Start with an R Markdown document;\n\n1. R Markdown (can embed R/other code chunks);\n\n1. Provide an option `autoplay`;\n\n1. MathJax just works;<sup>*</sup>\n\n1. Highlight code with `{{}}`;\n\n1. The RStudio addin \"Infinite Moon Reader\" automatically refreshes slides on changes;\n]\n\n.footnote[[*] Not really. See next page.]\n\n---\n\n# Math Expressions\n\nYou can write LaTeX math expressions inside a pair of dollar signs, e.g. &#36;\\alpha+\\beta$ renders $\\alpha+\\beta$. You can use the display style with double dollar signs:\n\n```\n$$\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i$$\n```\n\n$$\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i$$\n\nLimitations:\n\n1. The source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting `$$` must appear in the very beginning of a line, followed immediately by a non-space character, and the ending `$$` must be at the end of a line, led by a non-space character;\n\n1. There should not be spaces after the opening `$` or before the closing `$`.\n\n1. Math does not work on the title slide (see [#61](https://github.com/yihui/xaringan/issues/61) for a workaround).\n\n---\n\n# R Code\n\n```{r comment='#'}\n# a boring regression\nfit = lm(dist ~ 1 + speed, data = cars)\ncoef(summary(fit))\ndojutsu = c('地爆天星', '天照', '加具土命', '神威', '須佐能乎', '無限月読')\ngrep('天', dojutsu, value = TRUE)\n```\n\n---\n\n# R Plots\n\n```{r cars, fig.height=4, dev='svg'}\npar(mar = c(4, 4, 1, .1))\nplot(cars, pch = 19, col = 'darkgray', las = 1)\nabline(fit, lwd = 2)\n```\n\n---\n\n# Tables\n\nIf you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,\n\n```{r}\nknitr::kable(head(iris), format = 'html')\n```\n\n---\n\n# HTML Widgets\n\nI have not thoroughly tested HTML widgets against **xaringan**. Some may work well, and some may not. It is a little tricky.\n\nSimilarly, the Shiny mode (`runtime: shiny`) does not work. I might get these issues fixed in the future, but these are not of high priority to me. I never turn my presentation into a Shiny app. When I need to demonstrate more complicated examples, I just launch them separately. It is convenient to share slides with other people when they are plain HTML/JS applications.\n\nSee the next page for two HTML widgets.\n\n---\n\n```{r out.width='100%', fig.height=6, eval=require('leaflet')}\nlibrary(leaflet)\nleaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 17)\n```\n\n---\n\n```{r eval=require('DT'), tidy=FALSE}\nDT::datatable(\n  head(iris, 10),\n  fillContainer = FALSE, options = list(pageLength = 8)\n)\n```\n\n---\n\n# Some Tips\n\n- When you use the \"Infinite Moon Reader\" addin in RStudio, your R session will be blocked by default. You can click the red button on the right of the console to stop serving the slides, or use the _daemonized_ mode so that it does not block your R session. To do the latter, you can set the option\n\n    ```r\n    options(servr.daemon = TRUE)\n    ```\n    \n    in your current R session, or in `~/.Rprofile` so that it is applied to all future R sessions. I do the latter by myself.\n    \n    To know more about the web server, see the [**servr**](https://github.com/yihui/servr) package.\n\n--\n\n- Do not forget to try the `yolo` option of `xaringan::moon_reader`.\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        yolo: true\n    ```\n\n---\n\n# Some Tips\n\n- Slides can be automatically played if you set the `autoplay` option under `nature`, e.g. go to the next slide every 30 seconds in a lightning talk:\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        nature:\n          autoplay: 30000\n    ```\n\n--\n\n- A countdown timer can be added to every page of the slides using the `countdown` option under `nature`, e.g. if you want to spend one minute on every page when you give the talk, you can set:\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        nature:\n          countdown: 60000\n    ```\n\n    Then you will see a timer counting down from `01:00`, to `00:59`, `00:58`, ... When the time is out, the timer will continue but the time turns red.\n\n---\n\n# Some Tips\n\n- There are several ways to build incremental slides. See [this presentation](https://slides.yihui.name/xaringan/incremental.html) for examples.\n\n- The option `highlightLines: true` of `nature` will highlight code lines that start with `*`, or are wrapped in `{{ }}`, or have trailing comments `#<<`;\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        nature:\n          highlightLines: true\n    ```\n\n    See examples on the next page.\n\n---\n\n# Some Tips\n\n\n.pull-left[\nAn example using a leading `*`:\n\n    ```r\n    if (TRUE) {\n    ** message(\"Very important!\")\n    }\n    ```\nOutput:\n```r\nif (TRUE) {\n* message(\"Very important!\")\n}\n```\n\nThis is invalid R code, so it is a plain fenced code block that is not executed.\n]\n\n.pull-right[\nAn example using `{{}}`:\n\n    `r ''````{r tidy=FALSE}\n    if (TRUE) {\n    *{{ message(\"Very important!\") }}\n    }\n    ```\nOutput:\n```{r tidy=FALSE}\nif (TRUE) {\n{{ message(\"Very important!\") }}\n}\n```\n\nIt is valid R code so you can run it. Note that `{{}}` can wrap an R expression of multiple lines.\n]\n\n---\n\n# Some Tips\n\nAn example of using the trailing comment `#<<` to highlight lines:\n\n````markdown\n`r ''````{r tidy=FALSE}\nlibrary(ggplot2)\nggplot(mtcars) + \n  aes(mpg, disp) + \n  geom_point() +   #<<\n  geom_smooth()    #<<\n```\n````\n\nOutput:\n\n```{r tidy=FALSE, eval=FALSE}\nlibrary(ggplot2)\nggplot(mtcars) + \n  aes(mpg, disp) + \n  geom_point() +   #<<\n  geom_smooth()    #<<\n```\n\n---\n\n# Some Tips\n\n- To make slides work offline, you need to download a copy of remark.js in advance, because **xaringan** uses the online version by default (see the help page `?xaringan::moon_reader`).\n\n- You can use `xaringan::summon_remark()` to download the latest or a specified version of remark.js. By default, it is downloaded to `libs/remark-latest.min.js`.\n\n- Then change the `chakra` option in YAML to point to this file, e.g.\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        chakra: libs/remark-latest.min.js\n    ```\n\n- If you used Google fonts in slides (the default theme uses _Yanone Kaffeesatz_, _Droid Serif_, and _Source Code Pro_), they won't work offline unless you download or install them locally. The Heroku app [google-webfonts-helper](https://google-webfonts-helper.herokuapp.com/fonts) can help you download fonts and generate the necessary CSS.\n\n---\n\n# Macros\n\n- remark.js [allows users to define custom macros](https://github.com/yihui/xaringan/issues/80) (JS functions) that can be applied to Markdown text using the syntax `![:macroName arg1 arg2 ...]` or `![macroName](argument)`. For example, before remark.js initializes the slides, you can define a macro named `scale`:\n\n    ```js\n    remark.macros.scale = function (percentage) {\n      var url = this;\n      return '<img src=\"' + url + '\" style=\"width: ' + percentage + '\" />';\n    };\n    ```\n\n    Then the Markdown text\n\n    ```markdown\n    ![:scale 50%](image.jpg)\n    ```\n\n    will be translated to\n    \n    ```html\n    <img src=\"image.jpg\" style=\"width: 50%\" />\n    ```\n\n---\n\n# Macros (continued)\n\n- To insert macros in **xaringan** slides, you can use the option `beforeInit` under the option `nature`, e.g.,\n\n    ```yaml\n    output:\n      xaringan::moon_reader:\n        nature:\n          beforeInit: \"macros.js\"\n    ```\n\n    You save your remark.js macros in the file `macros.js`.\n\n- The `beforeInit` option can be used to insert arbitrary JS code before `remark.create()`. Inserting macros is just one of its possible applications.\n\n---\n\n# CSS\n\nAmong all options in `xaringan::moon_reader`, the most challenging but perhaps also the most rewarding one is `css`, because it allows you to customize the appearance of your slides using any CSS rules or hacks you know.\n\nYou can see the default CSS file [here](https://github.com/yihui/xaringan/blob/master/inst/rmarkdown/templates/xaringan/resources/default.css). You can completely replace it with your own CSS files, or define new rules to override the default. See the help page `?xaringan::moon_reader` for more information.\n\n---\n\n# CSS\n\nFor example, suppose you want to change the font for code from the default \"Source Code Pro\" to \"Ubuntu Mono\". You can create a CSS file named, say, `ubuntu-mono.css`:\n\n```css\n@import url(https://fonts.googleapis.com/css?family=Ubuntu+Mono:400,700,400italic);\n\n.remark-code, .remark-inline-code { font-family: 'Ubuntu Mono'; }\n```\n\nThen set the `css` option in the YAML metadata:\n\n```yaml\noutput:\n  xaringan::moon_reader:\n    css: [\"default\", \"ubuntu-mono.css\"]\n```\n\nHere I assume `ubuntu-mono.css` is under the same directory as your Rmd.\n\nSee [yihui/xaringan#83](https://github.com/yihui/xaringan/issues/83) for an example of using the [Fira Code](https://github.com/tonsky/FiraCode) font, which supports ligatures in program code.\n\n---\n\n# Themes\n\nDon't want to learn CSS? Okay, you can use some user-contributed themes. A theme typically consists of two CSS files `foo.css` and `foo-fonts.css`, where `foo` is the theme name. Below are some existing themes:\n\n```{r}\nnames(xaringan:::list_css())\n```\n\nTo use a theme, you can specify the `css` option as an array of CSS filenames (without the `.css` extensions), e.g.,\n\n```yaml\noutput:\n  xaringan::moon_reader:\n    css: [default, metropolis, metropolis-fonts]\n```\n\nIf you want to contribute a theme to **xaringan**, please read [this blog post](https://yihui.name/en/2017/10/xaringan-themes).\n\n---\nclass: inverse, middle, center\nbackground-image: url(https://upload.wikimedia.org/wikipedia/commons/3/39/Naruto_Shiki_Fujin.svg)\nbackground-size: contain\n\n# Naruto\n\n---\nbackground-image: url(https://upload.wikimedia.org/wikipedia/commons/b/be/Sharingan_triple.svg)\nbackground-size: 100px\nbackground-position: 90% 8%\n\n# Sharingan\n\nThe R package name **xaringan** was derived<sup>1</sup> from **Sharingan**, a dōjutsu in the Japanese anime _Naruto_ with two abilities:\n\n- the \"Eye of Insight\"\n\n- the \"Eye of Hypnotism\"\n\nI think a presentation is basically a way to communicate insights to the audience, and a great presentation may even \"hypnotize\" the audience.<sup>2,3</sup>\n\n.footnote[\n[1] In Chinese, the pronounciation of _X_ is _Sh_ /ʃ/ (as in _shrimp_). Now you should have a better idea of how to pronounce my last name _Xie_.\n\n[2] By comparison, bad presentations only put the audience to sleep.\n\n[3] Personally I find that setting background images for slides is a killer feature of remark.js. It is an effective way to bring visual impact into your presentations.\n]\n\n---\n\n# Naruto terminology\n\nThe **xaringan** package borrowed a few terms from Naruto, such as\n\n- [Sharingan](http://naruto.wikia.com/wiki/Sharingan) (写輪眼; the package name)\n\n- The [moon reader](http://naruto.wikia.com/wiki/Moon_Reader) (月読; an attractive R Markdown output format)\n\n- [Chakra](http://naruto.wikia.com/wiki/Chakra) (查克拉; the path to the remark.js library, which is the power to drive the presentation)\n\n- [Nature transformation](http://naruto.wikia.com/wiki/Nature_Transformation) (性質変化; transform the chakra by setting different options)\n\n- The [infinite moon reader](http://naruto.wikia.com/wiki/Infinite_Tsukuyomi) (無限月読; start a local web server to continuously serve your slides)\n\n- The [summoning technique](http://naruto.wikia.com/wiki/Summoning_Technique) (download remark.js from the web)\n\nYou can click the links to know more about them if you want. The jutsu \"Moon Reader\" may seem a little evil, but that does not mean your slides are evil.\n\n---\n\nclass: center\n\n# Hand seals (印)\n\nPress `h` or `?` to see the possible ninjutsu you can use in remark.js.\n\n![](https://upload.wikimedia.org/wikipedia/commons/7/7e/Mudra-Naruto-KageBunshin.svg)\n\n---\n\nclass: center, middle\n\n# Thanks!\n\nSlides created via the R package [**xaringan**](https://github.com/yihui/xaringan).\n\nThe chakra comes from [remark.js](https://remarkjs.com), [**knitr**](http://yihui.name/knitr), and [R Markdown](https://rmarkdown.rstudio.com).\n",
    "created" : 1519938785225.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2012919873",
    "id" : "3F8260BB",
    "lastKnownWriteTime" : 1519938798,
    "last_content_update" : 1519938798984,
    "path" : "~/Desktop/trial.Rmd",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}